{"$message_type":"future_incompat","future_incompat_report":[{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23220,"byte_end":23221,"line_start":633,"line_end":633,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":25118,"byte_end":25135,"line_start":685,"line_end":685,"column_start":38,"column_end":55,"is_primary":false,"text":[{"text":"                    FromSet(c)    => go!(self: emit c),","highlight_start":38,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:633:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m685\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    => go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":18043,"byte_end":18044,"line_start":564,"line_end":564,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21077,"byte_end":21103,"line_start":599,"line_end":599,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23196,"byte_end":23220,"line_start":633,"line_end":633,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":25118,"byte_end":25135,"line_start":685,"line_end":685,"column_start":38,"column_end":55,"is_primary":false,"text":[{"text":"                    FromSet(c)    => go!(self: emit c),","highlight_start":38,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21019,"byte_end":21108,"line_start":599,"line_end":599,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":17943,"byte_end":20706,"line_start":563,"line_end":588,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:564:76\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m564\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                 ) => ( $me.emit_char($c);   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m685\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23220,"byte_end":23221,"line_start":633,"line_end":633,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":25644,"byte_end":25661,"line_start":696,"line_end":696,"column_start":35,"column_end":52,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: emit c),","highlight_start":35,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:633:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m696\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m) => go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":18043,"byte_end":18044,"line_start":564,"line_end":564,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21077,"byte_end":21103,"line_start":599,"line_end":599,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23196,"byte_end":23220,"line_start":633,"line_end":633,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":25644,"byte_end":25661,"line_start":696,"line_end":696,"column_start":35,"column_end":52,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: emit c),","highlight_start":35,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21019,"byte_end":21108,"line_start":599,"line_end":599,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":17943,"byte_end":20706,"line_start":563,"line_end":588,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:564:76\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m564\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                    ) => ( $me.emit_char($c);   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m696\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23220,"byte_end":23221,"line_start":633,"line_end":633,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":26104,"byte_end":26121,"line_start":706,"line_end":706,"column_start":35,"column_end":52,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: emit c),","highlight_start":35,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:633:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m706\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m) => go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":18043,"byte_end":18044,"line_start":564,"line_end":564,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21077,"byte_end":21103,"line_start":599,"line_end":599,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23196,"byte_end":23220,"line_start":633,"line_end":633,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":26104,"byte_end":26121,"line_start":706,"line_end":706,"column_start":35,"column_end":52,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: emit c),","highlight_start":35,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21019,"byte_end":21108,"line_start":599,"line_end":599,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":17943,"byte_end":20706,"line_start":563,"line_end":588,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:564:76\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m564\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                    ) => ( $me.emit_char($c);   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m706\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23220,"byte_end":23221,"line_start":633,"line_end":633,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":26574,"byte_end":26591,"line_start":716,"line_end":716,"column_start":35,"column_end":52,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: emit c),","highlight_start":35,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:633:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m) => go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":18043,"byte_end":18044,"line_start":564,"line_end":564,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21077,"byte_end":21103,"line_start":599,"line_end":599,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23196,"byte_end":23220,"line_start":633,"line_end":633,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":26574,"byte_end":26591,"line_start":716,"line_end":716,"column_start":35,"column_end":52,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: emit c),","highlight_start":35,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21019,"byte_end":21108,"line_start":599,"line_end":599,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":17943,"byte_end":20706,"line_start":563,"line_end":588,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:564:76\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m564\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                    ) => ( $me.emit_char($c);   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23220,"byte_end":23221,"line_start":633,"line_end":633,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":27178,"byte_end":27195,"line_start":727,"line_end":727,"column_start":35,"column_end":52,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: emit c),","highlight_start":35,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:633:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m727\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m) => go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":18043,"byte_end":18044,"line_start":564,"line_end":564,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21077,"byte_end":21103,"line_start":599,"line_end":599,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23196,"byte_end":23220,"line_start":633,"line_end":633,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":27178,"byte_end":27195,"line_start":727,"line_end":727,"column_start":35,"column_end":52,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: emit c),","highlight_start":35,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21019,"byte_end":21108,"line_start":599,"line_end":599,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":17943,"byte_end":20706,"line_start":563,"line_end":588,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:564:76\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m564\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                    ) => ( $me.emit_char($c);   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m727\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23220,"byte_end":23221,"line_start":633,"line_end":633,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":27817,"byte_end":27834,"line_start":738,"line_end":738,"column_start":35,"column_end":52,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: emit c),","highlight_start":35,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:633:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m) => go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":18043,"byte_end":18044,"line_start":564,"line_end":564,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21077,"byte_end":21103,"line_start":599,"line_end":599,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23196,"byte_end":23220,"line_start":633,"line_end":633,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":27817,"byte_end":27834,"line_start":738,"line_end":738,"column_start":35,"column_end":52,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: emit c),","highlight_start":35,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21019,"byte_end":21108,"line_start":599,"line_end":599,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":17943,"byte_end":20706,"line_start":563,"line_end":588,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:564:76\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m564\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                    ) => ( $me.emit_char($c);   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23220,"byte_end":23221,"line_start":633,"line_end":633,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":28196,"byte_end":28213,"line_start":747,"line_end":747,"column_start":38,"column_end":55,"is_primary":false,"text":[{"text":"                    FromSet(c)    => go!(self: emit c),","highlight_start":38,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:633:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m747\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    => go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":18043,"byte_end":18044,"line_start":564,"line_end":564,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21077,"byte_end":21103,"line_start":599,"line_end":599,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23196,"byte_end":23220,"line_start":633,"line_end":633,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":28196,"byte_end":28213,"line_start":747,"line_end":747,"column_start":38,"column_end":55,"is_primary":false,"text":[{"text":"                    FromSet(c)    => go!(self: emit c),","highlight_start":38,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21019,"byte_end":21108,"line_start":599,"line_end":599,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":17943,"byte_end":20706,"line_start":563,"line_end":588,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:564:76\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m564\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                 ) => ( $me.emit_char($c);   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m747\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23220,"byte_end":23221,"line_start":633,"line_end":633,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":29778,"byte_end":29822,"line_start":780,"line_end":780,"column_start":25,"column_end":69,"is_primary":false,"text":[{"text":"                c    => go!(self: push_tag (c.to_ascii_lowercase())),","highlight_start":25,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:633:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mcmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m780\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: push_tag (c.to_ascii_lowercase()\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":18288,"byte_end":18289,"line_start":566,"line_end":566,"column_start":93,"column_end":94,"is_primary":true,"text":[{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":93,"highlight_end":94}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21077,"byte_end":21103,"line_start":599,"line_end":599,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23196,"byte_end":23220,"line_start":633,"line_end":633,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":29778,"byte_end":29822,"line_start":780,"line_end":780,"column_start":25,"column_end":69,"is_primary":false,"text":[{"text":"                c    => go!(self: push_tag (c.to_ascii_lowercase())),","highlight_start":25,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21019,"byte_end":21108,"line_start":599,"line_end":599,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":17943,"byte_end":20706,"line_start":563,"line_end":588,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:566:93\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m566\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mh_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m780\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: push_tag (c.to_ascii_lowercase())),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23220,"byte_end":23221,"line_start":633,"line_end":633,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":34856,"byte_end":34875,"line_start":875,"line_end":875,"column_start":25,"column_end":44,"is_primary":false,"text":[{"text":"                '-'  => go!(self: emit '-'),","highlight_start":25,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:633:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mcmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m875\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: emit '-'),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":18043,"byte_end":18044,"line_start":564,"line_end":564,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21077,"byte_end":21103,"line_start":599,"line_end":599,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23196,"byte_end":23220,"line_start":633,"line_end":633,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":34856,"byte_end":34875,"line_start":875,"line_end":875,"column_start":25,"column_end":44,"is_primary":false,"text":[{"text":"                '-'  => go!(self: emit '-'),","highlight_start":25,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21019,"byte_end":21108,"line_start":599,"line_end":599,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":17943,"byte_end":20706,"line_start":563,"line_end":588,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:564:76\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m564\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mt $c:expr                     ) => ( $me.emit_char($c);   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m875\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: emit '-'),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23220,"byte_end":23221,"line_start":633,"line_end":633,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23400,"byte_end":23419,"line_start":641,"line_end":641,"column_start":23,"column_end":42,"is_primary":false,"text":[{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":23,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":36601,"byte_end":36680,"line_start":909,"line_end":910,"column_start":25,"column_end":61,"is_primary":false,"text":[{"text":"                        go_match!(self: c,","highlight_start":25,"highlight_end":43},{"text":"                            '\"' , '\\'' , '<' , '=' => error);","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go_match!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23278,"byte_end":23447,"line_start":639,"line_end":644,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! go_match ( ( $me:ident : $x:expr, $($pats:pat),+ => $($cmds:tt)* ) => (","highlight_start":1,"highlight_end":85},{"text":"    match $x {","highlight_start":1,"highlight_end":15},{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":1,"highlight_end":43},{"text":"        _ => (),","highlight_start":1,"highlight_end":17},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"));","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:633:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mcmd:tt)+ ) => ( sh_trace!($me: $($cmd)+);\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m909\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   go_match!(self: c,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m910\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       '\"' , '\\'' , '<' , '=' => error);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` which comes from the expansion of the macro `go_match` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":20554,"byte_end":20555,"line_start":586,"line_end":586,"column_start":79,"column_end":80,"is_primary":true,"text":[{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":79,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21077,"byte_end":21103,"line_start":599,"line_end":599,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23196,"byte_end":23220,"line_start":633,"line_end":633,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23400,"byte_end":23419,"line_start":641,"line_end":641,"column_start":23,"column_end":42,"is_primary":false,"text":[{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":23,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":36601,"byte_end":36680,"line_start":909,"line_end":910,"column_start":25,"column_end":61,"is_primary":false,"text":[{"text":"                        go_match!(self: c,","highlight_start":25,"highlight_end":43},{"text":"                            '\"' , '\\'' , '<' , '=' => error);","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go_match!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23278,"byte_end":23447,"line_start":639,"line_end":644,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! go_match ( ( $me:ident : $x:expr, $($pats:pat),+ => $($cmds:tt)* ) => (","highlight_start":1,"highlight_end":85},{"text":"    match $x {","highlight_start":1,"highlight_end":15},{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":1,"highlight_end":43},{"text":"        _ => (),","highlight_start":1,"highlight_end":17},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"));","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21019,"byte_end":21108,"line_start":599,"line_end":599,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":17943,"byte_end":20706,"line_start":563,"line_end":588,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:586:79\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m586\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mor                            ) => ( $me.bad_char_error();   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m909\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   go_match!(self: c,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m910\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       '\"' , '\\'' , '<' , '=' => error);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go_match` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23220,"byte_end":23221,"line_start":633,"line_end":633,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":37340,"byte_end":37363,"line_start":925,"line_end":925,"column_start":33,"column_end":56,"is_primary":false,"text":[{"text":"                    Some(cl) => go!(self: push_name cl),","highlight_start":33,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:633:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m925\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m) => go!(self: push_name cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":19087,"byte_end":19088,"line_start":573,"line_end":573,"column_start":94,"column_end":95,"is_primary":true,"text":[{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":94,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21077,"byte_end":21103,"line_start":599,"line_end":599,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23196,"byte_end":23220,"line_start":633,"line_end":633,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":37340,"byte_end":37363,"line_start":925,"line_end":925,"column_start":33,"column_end":56,"is_primary":false,"text":[{"text":"                    Some(cl) => go!(self: push_name cl),","highlight_start":33,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21019,"byte_end":21108,"line_start":599,"line_end":599,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":17943,"byte_end":20706,"line_start":563,"line_end":588,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:573:94\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mc:expr                ) => ( $me.current_attr_name.push_char($c);   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m925\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: push_name cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23220,"byte_end":23221,"line_start":633,"line_end":633,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23400,"byte_end":23419,"line_start":641,"line_end":641,"column_start":23,"column_end":42,"is_primary":false,"text":[{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":23,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":37419,"byte_end":37492,"line_start":927,"line_end":928,"column_start":25,"column_end":55,"is_primary":false,"text":[{"text":"                        go_match!(self: c,","highlight_start":25,"highlight_end":43},{"text":"                            '\"' , '\\'' , '<' => error);","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go_match!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23278,"byte_end":23447,"line_start":639,"line_end":644,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! go_match ( ( $me:ident : $x:expr, $($pats:pat),+ => $($cmds:tt)* ) => (","highlight_start":1,"highlight_end":85},{"text":"    match $x {","highlight_start":1,"highlight_end":15},{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":1,"highlight_end":43},{"text":"        _ => (),","highlight_start":1,"highlight_end":17},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"));","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:633:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mcmd:tt)+ ) => ( sh_trace!($me: $($cmd)+);\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m927\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   go_match!(self: c,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m928\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       '\"' , '\\'' , '<' => error);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|____________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` which comes from the expansion of the macro `go_match` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":20554,"byte_end":20555,"line_start":586,"line_end":586,"column_start":79,"column_end":80,"is_primary":true,"text":[{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":79,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21077,"byte_end":21103,"line_start":599,"line_end":599,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23196,"byte_end":23220,"line_start":633,"line_end":633,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23400,"byte_end":23419,"line_start":641,"line_end":641,"column_start":23,"column_end":42,"is_primary":false,"text":[{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":23,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":37419,"byte_end":37492,"line_start":927,"line_end":928,"column_start":25,"column_end":55,"is_primary":false,"text":[{"text":"                        go_match!(self: c,","highlight_start":25,"highlight_end":43},{"text":"                            '\"' , '\\'' , '<' => error);","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go_match!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23278,"byte_end":23447,"line_start":639,"line_end":644,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! go_match ( ( $me:ident : $x:expr, $($pats:pat),+ => $($cmds:tt)* ) => (","highlight_start":1,"highlight_end":85},{"text":"    match $x {","highlight_start":1,"highlight_end":15},{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":1,"highlight_end":43},{"text":"        _ => (),","highlight_start":1,"highlight_end":17},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"));","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21019,"byte_end":21108,"line_start":599,"line_end":599,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":17943,"byte_end":20706,"line_start":563,"line_end":588,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:586:79\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m586\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mor                            ) => ( $me.bad_char_error();   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m927\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   go_match!(self: c,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m928\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       '\"' , '\\'' , '<' => error);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|____________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go_match` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23220,"byte_end":23221,"line_start":633,"line_end":633,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23400,"byte_end":23419,"line_start":641,"line_end":641,"column_start":23,"column_end":42,"is_primary":false,"text":[{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":23,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":38211,"byte_end":38284,"line_start":944,"line_end":945,"column_start":25,"column_end":55,"is_primary":false,"text":[{"text":"                        go_match!(self: c,","highlight_start":25,"highlight_end":43},{"text":"                            '\"' , '\\'' , '<' => error);","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go_match!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23278,"byte_end":23447,"line_start":639,"line_end":644,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! go_match ( ( $me:ident : $x:expr, $($pats:pat),+ => $($cmds:tt)* ) => (","highlight_start":1,"highlight_end":85},{"text":"    match $x {","highlight_start":1,"highlight_end":15},{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":1,"highlight_end":43},{"text":"        _ => (),","highlight_start":1,"highlight_end":17},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"));","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:633:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mcmd:tt)+ ) => ( sh_trace!($me: $($cmd)+);\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m944\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   go_match!(self: c,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m945\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       '\"' , '\\'' , '<' => error);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|____________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` which comes from the expansion of the macro `go_match` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":20554,"byte_end":20555,"line_start":586,"line_end":586,"column_start":79,"column_end":80,"is_primary":true,"text":[{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":79,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21077,"byte_end":21103,"line_start":599,"line_end":599,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23196,"byte_end":23220,"line_start":633,"line_end":633,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23400,"byte_end":23419,"line_start":641,"line_end":641,"column_start":23,"column_end":42,"is_primary":false,"text":[{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":23,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":38211,"byte_end":38284,"line_start":944,"line_end":945,"column_start":25,"column_end":55,"is_primary":false,"text":[{"text":"                        go_match!(self: c,","highlight_start":25,"highlight_end":43},{"text":"                            '\"' , '\\'' , '<' => error);","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go_match!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23278,"byte_end":23447,"line_start":639,"line_end":644,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! go_match ( ( $me:ident : $x:expr, $($pats:pat),+ => $($cmds:tt)* ) => (","highlight_start":1,"highlight_end":85},{"text":"    match $x {","highlight_start":1,"highlight_end":15},{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":1,"highlight_end":43},{"text":"        _ => (),","highlight_start":1,"highlight_end":17},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"));","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21019,"byte_end":21108,"line_start":599,"line_end":599,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":17943,"byte_end":20706,"line_start":563,"line_end":588,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:586:79\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m586\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mor                            ) => ( $me.bad_char_error();   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m944\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   go_match!(self: c,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m945\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       '\"' , '\\'' , '<' => error);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|____________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go_match` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23220,"byte_end":23221,"line_start":633,"line_end":633,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":38730,"byte_end":38759,"line_start":955,"line_end":955,"column_start":54,"column_end":83,"is_primary":false,"text":[{"text":"                '\\t' | '\\n' | '\\r' | '\\x0C' | ' ' => go!(self: discard_char input),","highlight_start":54,"highlight_end":83}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:633:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mme: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m955\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m' => go!(self: discard_char input),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":18506,"byte_end":18507,"line_start":568,"line_end":568,"column_start":83,"column_end":84,"is_primary":true,"text":[{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":83,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21077,"byte_end":21103,"line_start":599,"line_end":599,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23196,"byte_end":23220,"line_start":633,"line_end":633,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":38730,"byte_end":38759,"line_start":955,"line_end":955,"column_start":54,"column_end":83,"is_primary":false,"text":[{"text":"                '\\t' | '\\n' | '\\r' | '\\x0C' | ' ' => go!(self: discard_char input),","highlight_start":54,"highlight_end":83}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21019,"byte_end":21108,"line_start":599,"line_end":599,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":17943,"byte_end":20706,"line_start":563,"line_end":588,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:568:83\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m568\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   ) => ( $me.discard_char($input);      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m955\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m' => go!(self: discard_char input),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23220,"byte_end":23221,"line_start":633,"line_end":633,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":39677,"byte_end":39700,"line_start":969,"line_end":969,"column_start":38,"column_end":61,"is_primary":false,"text":[{"text":"                    FromSet(c)    => go!(self: push_value c),","highlight_start":38,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:633:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m969\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    => go!(self: push_value c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":19202,"byte_end":19203,"line_start":574,"line_end":574,"column_start":95,"column_end":96,"is_primary":true,"text":[{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":95,"highlight_end":96}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21077,"byte_end":21103,"line_start":599,"line_end":599,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23196,"byte_end":23220,"line_start":633,"line_end":633,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":39677,"byte_end":39700,"line_start":969,"line_end":969,"column_start":38,"column_end":61,"is_primary":false,"text":[{"text":"                    FromSet(c)    => go!(self: push_value c),","highlight_start":38,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21019,"byte_end":21108,"line_start":599,"line_end":599,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":17943,"byte_end":20706,"line_start":563,"line_end":588,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:574:95\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mpr               ) => ( $me.current_attr_value.push_char($c);   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m969\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: push_value c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23220,"byte_end":23221,"line_start":633,"line_end":633,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":39743,"byte_end":39768,"line_start":970,"line_end":970,"column_start":42,"column_end":67,"is_primary":false,"text":[{"text":"                    NotFromSet(ref b) => go!(self: append_value b),","highlight_start":42,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:633:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m970\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m b) => go!(self: append_value b),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":19319,"byte_end":19320,"line_start":575,"line_end":575,"column_start":98,"column_end":99,"is_primary":true,"text":[{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":98,"highlight_end":99}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21077,"byte_end":21103,"line_start":599,"line_end":599,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23196,"byte_end":23220,"line_start":633,"line_end":633,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":39743,"byte_end":39768,"line_start":970,"line_end":970,"column_start":42,"column_end":67,"is_primary":false,"text":[{"text":"                    NotFromSet(ref b) => go!(self: append_value b),","highlight_start":42,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21019,"byte_end":21108,"line_start":599,"line_end":599,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":17943,"byte_end":20706,"line_start":563,"line_end":588,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:575:98\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m             ) => ( $me.current_attr_value.push_tendril($c);   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m970\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: append_value b),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23220,"byte_end":23221,"line_start":633,"line_end":633,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":40278,"byte_end":40301,"line_start":980,"line_end":980,"column_start":38,"column_end":61,"is_primary":false,"text":[{"text":"                    FromSet(c)    => go!(self: push_value c),","highlight_start":38,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:633:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m980\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    => go!(self: push_value c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":19202,"byte_end":19203,"line_start":574,"line_end":574,"column_start":95,"column_end":96,"is_primary":true,"text":[{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":95,"highlight_end":96}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21077,"byte_end":21103,"line_start":599,"line_end":599,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23196,"byte_end":23220,"line_start":633,"line_end":633,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":40278,"byte_end":40301,"line_start":980,"line_end":980,"column_start":38,"column_end":61,"is_primary":false,"text":[{"text":"                    FromSet(c)    => go!(self: push_value c),","highlight_start":38,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21019,"byte_end":21108,"line_start":599,"line_end":599,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":17943,"byte_end":20706,"line_start":563,"line_end":588,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:574:95\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mpr               ) => ( $me.current_attr_value.push_char($c);   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m980\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: push_value c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23220,"byte_end":23221,"line_start":633,"line_end":633,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":40344,"byte_end":40369,"line_start":981,"line_end":981,"column_start":42,"column_end":67,"is_primary":false,"text":[{"text":"                    NotFromSet(ref b) => go!(self: append_value b),","highlight_start":42,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:633:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m981\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m b) => go!(self: append_value b),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":19319,"byte_end":19320,"line_start":575,"line_end":575,"column_start":98,"column_end":99,"is_primary":true,"text":[{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":98,"highlight_end":99}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21077,"byte_end":21103,"line_start":599,"line_end":599,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23196,"byte_end":23220,"line_start":633,"line_end":633,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":40344,"byte_end":40369,"line_start":981,"line_end":981,"column_start":42,"column_end":67,"is_primary":false,"text":[{"text":"                    NotFromSet(ref b) => go!(self: append_value b),","highlight_start":42,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21019,"byte_end":21108,"line_start":599,"line_end":599,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":17943,"byte_end":20706,"line_start":563,"line_end":588,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:575:98\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m             ) => ( $me.current_attr_value.push_tendril($c);   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m981\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: append_value b),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23220,"byte_end":23221,"line_start":633,"line_end":633,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23400,"byte_end":23419,"line_start":641,"line_end":641,"column_start":23,"column_end":42,"is_primary":false,"text":[{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":23,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":41034,"byte_end":41119,"line_start":994,"line_end":995,"column_start":25,"column_end":67,"is_primary":false,"text":[{"text":"                        go_match!(self: c,","highlight_start":25,"highlight_end":43},{"text":"                            '\"' , '\\'' , '<' , '=' , '`' => error);","highlight_start":1,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go_match!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23278,"byte_end":23447,"line_start":639,"line_end":644,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! go_match ( ( $me:ident : $x:expr, $($pats:pat),+ => $($cmds:tt)* ) => (","highlight_start":1,"highlight_end":85},{"text":"    match $x {","highlight_start":1,"highlight_end":15},{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":1,"highlight_end":43},{"text":"        _ => (),","highlight_start":1,"highlight_end":17},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"));","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:633:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mcmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m994\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   go_match!(self: c,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m995\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       '\"' , '\\'' , '<' , '=' , '`' => erro\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|________________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` which comes from the expansion of the macro `go_match` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":20554,"byte_end":20555,"line_start":586,"line_end":586,"column_start":79,"column_end":80,"is_primary":true,"text":[{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":79,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21077,"byte_end":21103,"line_start":599,"line_end":599,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23196,"byte_end":23220,"line_start":633,"line_end":633,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23400,"byte_end":23419,"line_start":641,"line_end":641,"column_start":23,"column_end":42,"is_primary":false,"text":[{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":23,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":41034,"byte_end":41119,"line_start":994,"line_end":995,"column_start":25,"column_end":67,"is_primary":false,"text":[{"text":"                        go_match!(self: c,","highlight_start":25,"highlight_end":43},{"text":"                            '\"' , '\\'' , '<' , '=' , '`' => error);","highlight_start":1,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go_match!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23278,"byte_end":23447,"line_start":639,"line_end":644,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! go_match ( ( $me:ident : $x:expr, $($pats:pat),+ => $($cmds:tt)* ) => (","highlight_start":1,"highlight_end":85},{"text":"    match $x {","highlight_start":1,"highlight_end":15},{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":1,"highlight_end":43},{"text":"        _ => (),","highlight_start":1,"highlight_end":17},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"));","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21019,"byte_end":21108,"line_start":599,"line_end":599,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":17943,"byte_end":20706,"line_start":563,"line_end":588,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:586:79\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m586\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mor                            ) => ( $me.bad_char_error();   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m994\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   go_match!(self: c,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m995\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       '\"' , '\\'' , '<' , '=' , '`' => error);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|________________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go_match` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23220,"byte_end":23221,"line_start":633,"line_end":633,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":41233,"byte_end":41258,"line_start":998,"line_end":998,"column_start":42,"column_end":67,"is_primary":false,"text":[{"text":"                    NotFromSet(ref b) => go!(self: append_value b),","highlight_start":42,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:633:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m998\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m b) => go!(self: append_value b),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":19319,"byte_end":19320,"line_start":575,"line_end":575,"column_start":98,"column_end":99,"is_primary":true,"text":[{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":98,"highlight_end":99}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21077,"byte_end":21103,"line_start":599,"line_end":599,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23196,"byte_end":23220,"line_start":633,"line_end":633,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":41233,"byte_end":41258,"line_start":998,"line_end":998,"column_start":42,"column_end":67,"is_primary":false,"text":[{"text":"                    NotFromSet(ref b) => go!(self: append_value b),","highlight_start":42,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21019,"byte_end":21108,"line_start":599,"line_end":599,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":17943,"byte_end":20706,"line_start":563,"line_end":588,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:575:98\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m             ) => ( $me.current_attr_value.push_tendril($c);   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m998\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: append_value b),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23220,"byte_end":23221,"line_start":633,"line_end":633,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":43148,"byte_end":43173,"line_start":1040,"line_end":1040,"column_start":25,"column_end":50,"is_primary":false,"text":[{"text":"                c    => go!(self: push_comment c),","highlight_start":25,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:633:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mcmd:tt)+ ) => ( sh_trace!($me: $($cmd)+);\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1040\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: push_comment c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":19427,"byte_end":19428,"line_start":576,"line_end":576,"column_start":92,"column_end":93,"is_primary":true,"text":[{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":92,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21077,"byte_end":21103,"line_start":599,"line_end":599,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23196,"byte_end":23220,"line_start":633,"line_end":633,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":43148,"byte_end":43173,"line_start":1040,"line_end":1040,"column_start":25,"column_end":50,"is_primary":false,"text":[{"text":"                c    => go!(self: push_comment c),","highlight_start":25,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21019,"byte_end":21108,"line_start":599,"line_end":599,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":17943,"byte_end":20706,"line_start":563,"line_end":588,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:576:92\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mh_comment $c:expr             ) => ( $me.current_comment.push_char($c);   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1040\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: push_comment c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23220,"byte_end":23221,"line_start":633,"line_end":633,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":45644,"byte_end":45697,"line_start":1089,"line_end":1089,"column_start":25,"column_end":78,"is_primary":false,"text":[{"text":"                c    => go!(self: push_doctype_name (c.to_ascii_lowercase())),","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:633:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mcmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1089\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: push_doctype_name (c.to_ascii_lowercase()\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":20010,"byte_end":20011,"line_start":581,"line_end":581,"column_start":105,"column_end":106,"is_primary":true,"text":[{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":105,"highlight_end":106}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21077,"byte_end":21103,"line_start":599,"line_end":599,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23196,"byte_end":23220,"line_start":633,"line_end":633,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":45644,"byte_end":45697,"line_start":1089,"line_end":1089,"column_start":25,"column_end":78,"is_primary":false,"text":[{"text":"                c    => go!(self: push_doctype_name (c.to_ascii_lowercase())),","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21019,"byte_end":21108,"line_start":599,"line_end":599,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":17943,"byte_end":20706,"line_start":563,"line_end":588,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:581:105\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m581\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mh_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1089\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: push_doctype_name (c.to_ascii_lowercase())),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23220,"byte_end":23221,"line_start":633,"line_end":633,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":48085,"byte_end":48118,"line_start":1131,"line_end":1131,"column_start":25,"column_end":58,"is_primary":false,"text":[{"text":"                c    => go!(self: push_doctype_id kind c),","highlight_start":25,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:633:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mcmd:tt)+ ) => ( sh_trace!($me: $($cmd)+);\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1131\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: push_doctype_id kind c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":20113,"byte_end":20114,"line_start":582,"line_end":582,"column_start":94,"column_end":95,"is_primary":true,"text":[{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":94,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21077,"byte_end":21103,"line_start":599,"line_end":599,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23196,"byte_end":23220,"line_start":633,"line_end":633,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":48085,"byte_end":48118,"line_start":1131,"line_end":1131,"column_start":25,"column_end":58,"is_primary":false,"text":[{"text":"                c    => go!(self: push_doctype_id kind c),","highlight_start":25,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21019,"byte_end":21108,"line_start":599,"line_end":599,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":17943,"byte_end":20706,"line_start":563,"line_end":588,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:582:94\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m582\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mh_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1131\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: push_doctype_id kind c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23220,"byte_end":23221,"line_start":633,"line_end":633,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":48592,"byte_end":48625,"line_start":1139,"line_end":1139,"column_start":25,"column_end":58,"is_primary":false,"text":[{"text":"                c    => go!(self: push_doctype_id kind c),","highlight_start":25,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:633:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mcmd:tt)+ ) => ( sh_trace!($me: $($cmd)+);\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: push_doctype_id kind c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":20113,"byte_end":20114,"line_start":582,"line_end":582,"column_start":94,"column_end":95,"is_primary":true,"text":[{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":94,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21077,"byte_end":21103,"line_start":599,"line_end":599,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23196,"byte_end":23220,"line_start":633,"line_end":633,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":48592,"byte_end":48625,"line_start":1139,"line_end":1139,"column_start":25,"column_end":58,"is_primary":false,"text":[{"text":"                c    => go!(self: push_doctype_id kind c),","highlight_start":25,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21019,"byte_end":21108,"line_start":599,"line_end":599,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":17943,"byte_end":20706,"line_start":563,"line_end":588,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:582:94\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m582\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mh_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: push_doctype_id kind c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23220,"byte_end":23221,"line_start":633,"line_end":633,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":50585,"byte_end":50619,"line_start":1177,"line_end":1177,"column_start":25,"column_end":59,"is_primary":false,"text":[{"text":"                '\\0' => go!(self: push_comment '\\u{fffd}'),","highlight_start":25,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:633:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mcmd:tt)+ ) => ( sh_trace!($me: $($cmd)+);\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: push_comment '\\u{fffd}'),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":19427,"byte_end":19428,"line_start":576,"line_end":576,"column_start":92,"column_end":93,"is_primary":true,"text":[{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":92,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21077,"byte_end":21103,"line_start":599,"line_end":599,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23196,"byte_end":23220,"line_start":633,"line_end":633,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":50585,"byte_end":50619,"line_start":1177,"line_end":1177,"column_start":25,"column_end":59,"is_primary":false,"text":[{"text":"                '\\0' => go!(self: push_comment '\\u{fffd}'),","highlight_start":25,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21019,"byte_end":21108,"line_start":599,"line_end":599,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":17943,"byte_end":20706,"line_start":563,"line_end":588,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:576:92\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mh_comment $c:expr             ) => ( $me.current_comment.push_char($c);   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: push_comment '\\u{fffd}'),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23220,"byte_end":23221,"line_start":633,"line_end":633,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":50645,"byte_end":50670,"line_start":1178,"line_end":1178,"column_start":25,"column_end":50,"is_primary":false,"text":[{"text":"                c    => go!(self: push_comment c),","highlight_start":25,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:633:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mcmd:tt)+ ) => ( sh_trace!($me: $($cmd)+);\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: push_comment c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":19427,"byte_end":19428,"line_start":576,"line_end":576,"column_start":92,"column_end":93,"is_primary":true,"text":[{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":92,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21077,"byte_end":21103,"line_start":599,"line_end":599,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23196,"byte_end":23220,"line_start":633,"line_end":633,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":50645,"byte_end":50670,"line_start":1178,"line_end":1178,"column_start":25,"column_end":50,"is_primary":false,"text":[{"text":"                c    => go!(self: push_comment c),","highlight_start":25,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21019,"byte_end":21108,"line_start":599,"line_end":599,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":17943,"byte_end":20706,"line_start":563,"line_end":588,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:576:92\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mh_comment $c:expr             ) => ( $me.current_comment.push_char($c);   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: push_comment c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23220,"byte_end":23221,"line_start":633,"line_end":633,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":51636,"byte_end":51658,"line_start":1201,"line_end":1201,"column_start":22,"column_end":44,"is_primary":false,"text":[{"text":"                c => go!(self: push_temp c),","highlight_start":22,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:633:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m$($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+);\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: push_temp c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":18622,"byte_end":18623,"line_start":569,"line_end":569,"column_start":85,"column_end":86,"is_primary":true,"text":[{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":85,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21077,"byte_end":21103,"line_start":599,"line_end":599,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23196,"byte_end":23220,"line_start":633,"line_end":633,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":51636,"byte_end":51658,"line_start":1201,"line_end":1201,"column_start":22,"column_end":44,"is_primary":false,"text":[{"text":"                c => go!(self: push_temp c),","highlight_start":22,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21019,"byte_end":21108,"line_start":599,"line_end":599,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":17943,"byte_end":20706,"line_start":563,"line_end":588,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:569:85\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m569\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mpush_temp $c:expr                ) => ( $me.temp_buf.push_char($c);   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: push_temp c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23220,"byte_end":23221,"line_start":633,"line_end":633,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":52066,"byte_end":52090,"line_start":1212,"line_end":1212,"column_start":24,"column_end":48,"is_primary":false,"text":[{"text":"                ']' => go!(self: push_temp ']'),","highlight_start":24,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:633:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m$cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+);\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1212\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: push_temp ']'),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":18622,"byte_end":18623,"line_start":569,"line_end":569,"column_start":85,"column_end":86,"is_primary":true,"text":[{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":85,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21077,"byte_end":21103,"line_start":599,"line_end":599,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23196,"byte_end":23220,"line_start":633,"line_end":633,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":52066,"byte_end":52090,"line_start":1212,"line_end":1212,"column_start":24,"column_end":48,"is_primary":false,"text":[{"text":"                ']' => go!(self: push_temp ']'),","highlight_start":24,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21019,"byte_end":21108,"line_start":599,"line_end":599,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":17943,"byte_end":20706,"line_start":563,"line_end":588,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:569:85\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m569\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0msh_temp $c:expr                ) => ( $me.temp_buf.push_char($c);   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1212\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: push_temp ']'),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23220,"byte_end":23221,"line_start":633,"line_end":633,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":53410,"byte_end":53427,"line_start":1253,"line_end":1253,"column_start":24,"column_end":41,"is_primary":false,"text":[{"text":"                    => go!(self: emit c),","highlight_start":24,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:633:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m$cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+);\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1253\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: emit c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":18043,"byte_end":18044,"line_start":564,"line_end":564,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21077,"byte_end":21103,"line_start":599,"line_end":599,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23196,"byte_end":23220,"line_start":633,"line_end":633,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":53410,"byte_end":53427,"line_start":1253,"line_end":1253,"column_start":24,"column_end":41,"is_primary":false,"text":[{"text":"                    => go!(self: emit c),","highlight_start":24,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21019,"byte_end":21108,"line_start":599,"line_end":599,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":17943,"byte_end":20706,"line_start":563,"line_end":588,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:564:76\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m564\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mit $c:expr                     ) => ( $me.emit_char($c);   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1253\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: emit c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23220,"byte_end":23221,"line_start":633,"line_end":633,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":53495,"byte_end":53518,"line_start":1256,"line_end":1256,"column_start":24,"column_end":47,"is_primary":false,"text":[{"text":"                    => go!(self: push_value c),","highlight_start":24,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:633:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m$cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+);\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1256\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: push_value c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":19202,"byte_end":19203,"line_start":574,"line_end":574,"column_start":95,"column_end":96,"is_primary":true,"text":[{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":95,"highlight_end":96}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21077,"byte_end":21103,"line_start":599,"line_end":599,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":23196,"byte_end":23220,"line_start":633,"line_end":633,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":53495,"byte_end":53518,"line_start":1256,"line_end":1256,"column_start":24,"column_end":47,"is_primary":false,"text":[{"text":"                    => go!(self: push_value c),","highlight_start":24,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21160,"byte_end":23276,"line_start":602,"line_end":637,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":21019,"byte_end":21108,"line_start":599,"line_end":599,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs","byte_start":17943,"byte_end":20706,"line_start":563,"line_end":588,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/arthursantos/.cargo/registry/src/index.crates.io-6f17d22bba15001f/html5ever-0.22.5/src/tokenizer/mod.rs:574:95\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0msh_value $c:expr               ) => ( $me.current_attr_value.push_char($c);   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1256\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m=> go!(self: push_value c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}}]}
